schema {
  query: Query
  mutation: Mutation
}

"Represents a lineup in a match."
type Lineup {
  id: String!
  matchId: String!
  teamId: String!
  formation: Formation!
  isStarting: Boolean!
  players: [MatchPlayer!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  match: Match
  team: Team
}

type Match {
  id: String!
  homeTeamId: String!
  awayTeamId: String!
  scheduledDate: DateTime!
  status: Status!
  score: Score
  createdAt: DateTime!
  updatedAt: DateTime!
  homeTeam: Team
  awayTeam: Team
  events: [MatchEvent!]
  lineups: [Lineup!]
  matchPlayers: [MatchPlayer!]
  homeTeamLineups: [Lineup!]
  awayTeamLineups: [Lineup!]
}

type MatchEvent {
  id: String!
  matchId: String!
  type: EventType!
  timestamp: DateTime!
  minuteOfMatch: Int!
  playerId: String
  secondaryPlayerId: String
  teamId: String
  description: String
  match: Match!
  player: Player
  secondaryPlayer: Player
  team: Team
}

type MatchPlayer {
  id: String!
  matchId: String!
  lineupId: String!
  playerId: String!
  isStarter: Boolean!
  position: String!
  substitutedInAt: DateTime
  substitutedOutAt: DateTime
  teamType: TeamType!
  match: Match!
  player: Player!
  lineup: Lineup!
  ratings: [Rating!]!
  averageRating: Float
}

"A connection to a list of items."
type MatchPlayersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MatchPlayersEdge!]
  "A flattened list of the nodes."
  nodes: [MatchPlayer!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type MatchPlayersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MatchPlayer!
}

"A connection to a list of items."
type MatchesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MatchesEdge!]
  "A flattened list of the nodes."
  nodes: [Match!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type MatchesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Match!
}

"Represents the mutations available."
type Mutation {
  addPlayer(player: PlayerInput!): Player! @authorize(roles: [ "Admin", "Rater" ]) @cost(weight: "10")
  updatePlayer(player: PlayerInput!): Player! @authorize(roles: [ "Admin", "Rater" ]) @cost(weight: "10")
  deletePlayer(id: String!): Player! @authorize(roles: [ "Admin", "Rater" ]) @cost(weight: "10")
  addTeam(team: TeamInput!): Team! @cost(weight: "10")
  updateTeam(team: TeamInput!): Team! @authorize(roles: [ "Admin" ]) @cost(weight: "10")
  deleteTeam(id: String!): Team! @authorize(roles: [ "Admin" ]) @cost(weight: "10")
  addMatch(match: MatchInput!): Match! @cost(weight: "10")
  updateMatch(match: MatchInput!): Match! @cost(weight: "10")
  deleteMatch(id: String!): Match! @cost(weight: "10")
  updateMatchStatus(id: String! status: Status!): Match! @cost(weight: "10")
  updateMatchScore(id: String! score: ScoreInput!): Match! @cost(weight: "10")
  addMatchPlayer(matchPlayer: MatchPlayerInput!): MatchPlayer! @authorize(roles: [ "Admin" ]) @cost(weight: "10")
  updateMatchPlayer(matchPlayer: MatchPlayerInput!): MatchPlayer! @authorize(roles: [ "Admin" ]) @cost(weight: "10")
  deleteMatchPlayer(id: String!): MatchPlayer! @authorize(roles: [ "Admin" ]) @cost(weight: "10")
  substitutePlayer(matchPlayerId: String! substitutionTime: DateTime!): MatchPlayer! @authorize(roles: [ "Admin" ]) @cost(weight: "10")
  addRating(rating: RatingInput!): Rating! @authorize(roles: [ "Admin", "Rater" ]) @cost(weight: "10")
  updateRating(rating: RatingInput!): Rating! @authorize(roles: [ "Admin", "Rater" ]) @cost(weight: "10")
  deleteRating(id: String!): Rating! @authorize(roles: [ "Admin" ]) @cost(weight: "10")
  addMatchEvent(matchEvent: MatchEventInput!): MatchEvent! @authorize(roles: [ "Admin" ]) @cost(weight: "10")
  updateMatchEvent(matchEvent: MatchEventInput!): MatchEvent! @authorize(roles: [ "Admin" ]) @cost(weight: "10")
  deleteMatchEvent(id: String!): MatchEvent! @authorize(roles: [ "Admin" ]) @cost(weight: "10")
  addGoalEvent(matchId: String! scorerId: String! assisterId: String teamId: String! timestamp: DateTime! minuteOfMatch: Int! isOwnGoal: Boolean! = false): MatchEvent! @authorize(roles: [ "Admin" ]) @cost(weight: "10")
  addCardEvent(matchId: String! playerId: String! teamId: String! cardType: EventType! timestamp: DateTime! minuteOfMatch: Int!): MatchEvent! @authorize(roles: [ "Admin" ]) @cost(weight: "10")
  addSubstitutionEvent(matchId: String! playerOutId: String! playerInId: String! teamId: String! timestamp: DateTime! minuteOfMatch: Int!): MatchEvent! @authorize(roles: [ "Admin" ]) @cost(weight: "10")
  saveLineup(lineup: LineupInput!): Lineup! @cost(weight: "10")
  deleteLineup(id: String!): Lineup! @cost(weight: "10")
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Player {
  id: String!
  firstName: String!
  lastName: String!
  position: String!
  nationality: String
  imageUrl: String
  dateOfBirth: DateTime
  teamId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  team: Team
}

"A connection to a list of items."
type PlayersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PlayersEdge!]
  "A flattened list of the nodes."
  nodes: [Player!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type PlayersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Player!
}

"Represents the queries available."
type Query {
  players("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [PlayerSortInput!] @cost(weight: "10")): PlayersConnection @listSize(assumedSize: 35, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 10, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  teams("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [TeamSortInput!] @cost(weight: "10")): TeamsConnection @listSize(assumedSize: 20, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 10, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  matches("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [MatchSortInput!] @cost(weight: "10")): MatchesConnection @listSize(assumedSize: 50, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 10, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  matchPlayers("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [MatchPlayerSortInput!] @cost(weight: "10")): MatchPlayersConnection @listSize(assumedSize: 50, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 10, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  ratings("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [RatingSortInput!] @cost(weight: "10")): RatingsConnection @listSize(assumedSize: 100, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 10, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  lineup(id: String!): Lineup @cost(weight: "10")
  teamLineups(teamId: String! matchId: String): [Lineup!]! @cost(weight: "10")
}

type Rating {
  id: String!
  matchPlayerId: String!
  userId: String!
  score: Int!
  createdAt: DateTime!
  matchPlayer: MatchPlayer!
}

"A connection to a list of items."
type RatingsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [RatingsEdge!]
  "A flattened list of the nodes."
  nodes: [Rating!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type RatingsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Rating!
}

type Score {
  homeTeamScore: Int!
  awayTeamScore: Int!
}

type Stadium {
  name: String!
  city: String!
  surface: String!
}

type Team {
  id: String!
  name: String!
  shortName: String!
  logo: String
  website: String
  stadium: Stadium
  createdAt: DateTime!
  updatedAt: DateTime!
  players: [Player!]
}

"A connection to a list of items."
type TeamsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TeamsEdge!]
  "A flattened list of the nodes."
  nodes: [Team!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type TeamsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Team!
}

"Represents a lineup in a match."
input LineupInput {
  id: String!
  matchId: String!
  teamId: String!
  formation: Formation!
  isStarting: Boolean!
  players: [MatchPlayerInput!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  match: MatchInput
  team: TeamInput
}

"Represents a lineup in a match."
input LineupSortInput {
  id: SortEnumType @cost(weight: "10")
  matchId: SortEnumType @cost(weight: "10")
  teamId: SortEnumType @cost(weight: "10")
  formation: SortEnumType @cost(weight: "10")
  isStarting: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  match: MatchSortInput @cost(weight: "10")
  team: TeamSortInput @cost(weight: "10")
}

input MatchEventInput {
  id: String!
  matchId: String!
  type: EventType!
  timestamp: DateTime!
  minuteOfMatch: Int!
  playerId: String
  secondaryPlayerId: String
  teamId: String
  description: String
  match: MatchInput!
  player: PlayerInput
  secondaryPlayer: PlayerInput
  team: TeamInput
}

input MatchInput {
  id: String!
  homeTeamId: String!
  awayTeamId: String!
  scheduledDate: DateTime!
  status: Status!
  score: ScoreInput
  createdAt: DateTime!
  updatedAt: DateTime!
  homeTeam: TeamInput
  awayTeam: TeamInput
  events: [MatchEventInput!]
  lineups: [LineupInput!]
  matchPlayers: [MatchPlayerInput!]
  homeTeamLineups: [LineupInput!]
  awayTeamLineups: [LineupInput!]
}

input MatchPlayerInput {
  id: String!
  matchId: String!
  lineupId: String!
  playerId: String!
  isStarter: Boolean!
  position: String!
  substitutedInAt: DateTime
  substitutedOutAt: DateTime
  teamType: TeamType!
  match: MatchInput!
  player: PlayerInput!
  lineup: LineupInput!
  ratings: [RatingInput!]!
}

input MatchPlayerSortInput {
  id: SortEnumType @cost(weight: "10")
  matchId: SortEnumType @cost(weight: "10")
  lineupId: SortEnumType @cost(weight: "10")
  playerId: SortEnumType @cost(weight: "10")
  isStarter: SortEnumType @cost(weight: "10")
  position: SortEnumType @cost(weight: "10")
  substitutedInAt: SortEnumType @cost(weight: "10")
  substitutedOutAt: SortEnumType @cost(weight: "10")
  teamType: SortEnumType @cost(weight: "10")
  match: MatchSortInput @cost(weight: "10")
  player: PlayerSortInput @cost(weight: "10")
  lineup: LineupSortInput @cost(weight: "10")
  averageRating: SortEnumType @cost(weight: "10")
}

input MatchSortInput {
  id: SortEnumType @cost(weight: "10")
  homeTeamId: SortEnumType @cost(weight: "10")
  awayTeamId: SortEnumType @cost(weight: "10")
  scheduledDate: SortEnumType @cost(weight: "10")
  status: SortEnumType @cost(weight: "10")
  score: ScoreSortInput @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  homeTeam: TeamSortInput @cost(weight: "10")
  awayTeam: TeamSortInput @cost(weight: "10")
}

input PlayerInput {
  id: String!
  firstName: String!
  lastName: String!
  position: String!
  nationality: String
  imageUrl: String
  dateOfBirth: DateTime
  teamId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  team: TeamInput
}

input PlayerSortInput {
  id: SortEnumType @cost(weight: "10")
  firstName: SortEnumType @cost(weight: "10")
  lastName: SortEnumType @cost(weight: "10")
  position: SortEnumType @cost(weight: "10")
  nationality: SortEnumType @cost(weight: "10")
  imageUrl: SortEnumType @cost(weight: "10")
  dateOfBirth: SortEnumType @cost(weight: "10")
  teamId: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  team: TeamSortInput @cost(weight: "10")
}

input RatingInput {
  id: String!
  matchPlayerId: String!
  userId: String!
  score: Int!
  createdAt: DateTime!
  matchPlayer: MatchPlayerInput!
}

input RatingSortInput {
  id: SortEnumType @cost(weight: "10")
  matchPlayerId: SortEnumType @cost(weight: "10")
  userId: SortEnumType @cost(weight: "10")
  score: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  matchPlayer: MatchPlayerSortInput @cost(weight: "10")
}

input ScoreInput {
  homeTeamScore: Int!
  awayTeamScore: Int!
}

input ScoreSortInput {
  homeTeamScore: SortEnumType @cost(weight: "10")
  awayTeamScore: SortEnumType @cost(weight: "10")
}

input StadiumInput {
  name: String!
  city: String!
  surface: String!
}

input StadiumSortInput {
  name: SortEnumType @cost(weight: "10")
  city: SortEnumType @cost(weight: "10")
  surface: SortEnumType @cost(weight: "10")
}

input TeamInput {
  id: String!
  name: String!
  shortName: String!
  logo: String
  website: String
  stadium: StadiumInput
  createdAt: DateTime!
  updatedAt: DateTime!
  players: [PlayerInput!]
}

input TeamSortInput {
  id: SortEnumType @cost(weight: "10")
  name: SortEnumType @cost(weight: "10")
  shortName: SortEnumType @cost(weight: "10")
  logo: SortEnumType @cost(weight: "10")
  website: SortEnumType @cost(weight: "10")
  stadium: StadiumSortInput @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "After the resolver was executed."
  AFTER_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

enum EventType {
  GOAL
  OWN_GOAL
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  PENALTY_SCORED
  PENALTY_MISSED
  GAME_START
  GAME_END
  HALF_TIME_START
  HALF_TIME_END
}

enum Formation {
  "Custom"
  FORMATION_CUSTOM
  "4-4-2"
  FORMATION442
  "4-3-3"
  FORMATION433
  "3-5-2"
  FORMATION352
  "3-4-3"
  FORMATION343
  "4-2-3-1"
  FORMATION4231
  "4-3-2-1"
  FORMATION4321
  "5-3-2"
  FORMATION532
  "5-4-1"
  FORMATION541
  "4-5-1"
  FORMATION451
  "5-2-3"
  FORMATION523
  "4-1-4-1"
  FORMATION4141
  "3-1-4-2"
  FORMATION3142
}

enum SortEnumType {
  ASC
  DESC
}

enum Status {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  POSTPONED
  CANCELLED
}

enum TeamType {
  HOME
  AWAY
}

"The authorize directive."
directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!] "The `slicingArgumentDefaultValue` argument can be used to define a default value for a slicing argument, which is used if the argument is not present in a query." slicingArgumentDefaultValue: Int "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true) on FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")