name: Deploy to GCP

on:
  push:
    branches: [ main ]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/norskball-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: DOCKER_BUILDKIT=1

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/norskball-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DOCKER_BUILDKIT=1
            VITE_API_BASE_URL=https://api.norskball.no
            VITE_API_TIMEOUT=10000
            VITE_GOOGLE_CLIENT_ID=266076307059-pfaiq2uh5l0dnd0t3q5p8cs7s1i7ilk2.apps.googleusercontent.com

  deploy-infrastructure:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: norskball
          install_components: 'beta'

      - name: Copy Configuration Files
        run: |
          # Get the service account email from credentials
          SA_EMAIL=$(echo '${{ secrets.GCP_SA_KEY }}' | jq -r '.client_email')
          
          # Ensure the Norskball directory exists
          gcloud beta compute ssh --zone=europe-north1-a norskball-vm --tunnel-through-iap --command="mkdir -p ~/Norskball" --quiet
          
          # Copy latest docker-compose and nginx configs
          gcloud beta compute scp --zone=europe-north1-a --tunnel-through-iap --recurse ./docker-compose.yml ./nginx norskball-vm:~/Norskball/ --quiet

  deploy-services:
    needs: [deploy-infrastructure]
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: norskball
          install_components: 'beta'

      - name: Deploy and Start Services
        run: |
          # Get the service account email from credentials
          SA_EMAIL=$(echo '${{ secrets.GCP_SA_KEY }}' | jq -r '.client_email')
          
          gcloud beta compute ssh norskball-vm --zone=europe-north1-a --tunnel-through-iap --command='
            cd ~/Norskball
            export DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
            
            # Pull new images
            echo "Pulling new images..."
            docker compose pull || exit 1
            
            # Start services
            echo "Starting services..."
            docker compose up -d || exit 1
            
            # Verify services are running
            echo "Verifying services..."
            docker compose ps
            
            # Check for any containers that exited
            if [ $(docker compose ps -q -a --filter status=exited | wc -l) -gt 0 ]; then
              echo "Some containers failed to start. Checking logs..."
              docker compose logs
              exit 1
            fi
            
            echo "Deployment completed successfully!"
          ' --quiet 